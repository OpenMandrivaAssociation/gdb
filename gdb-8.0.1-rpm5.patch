--- gdb-7.3.50.20110722/gdb/configure.ac.rpm5~	2012-03-17 02:53:38.142198149 +0100
+++ gdb-7.3.50.20110722/gdb/configure.ac	2012-03-17 02:53:38.324198420 +0100
@@ -151,7 +151,9 @@ if test "x$with_rpm" != "xno"; then
   save_LIBS="$LIBS"
   LIBS="$LIBS -ldl"
   AC_RUN_IFELSE(AC_LANG_PROGRAM([[
-#include <rpm/rpmlib.h>
+#include <rpm/rpmtypes.h>
+#include <stdio.h>
+#include <stdlib.h>
 #include <dlfcn.h>
 #include <errno.h>
   ]], [[
@@ -235,20 +237,23 @@ if test "x$with_rpm" != "xno"; then
     AC_MSG_CHECKING([rpm library API compatibility])
     # The compilation requires -Werror to verify anything.
     save_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS -Werror"
+    CFLAGS="$CFLAGS -I/usr/include/rpm $RPM_CFLAGS -Werror"
     AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
 /* Duplicate here the declarations to verify they match "elfread.c".  */
-#include <rpm/rpmlib.h>
-#include <rpm/rpmts.h>
-#include <rpm/rpmdb.h>
-#include <rpm/header.h>
-extern char * headerFormat(Header h, const char * fmt, errmsg_t * errmsg);
+#include <stdint.h>
+#include <rpmio.h>
+#include <rpmtypes.h>
+#include <rpmrc.h>
+#include <rpmtag.h>
+#include <rpmts.h>
+#include <rpmdb.h>
+extern char * headerSprintf(Header h, const char * fmt, headerTagTableEntry tags, headerSprintfExtension exts, errmsg_t * errmsg);
 extern int rpmReadConfigFiles(const char * file, const char * target);
-extern rpmdbMatchIterator rpmdbFreeIterator(rpmdbMatchIterator mi);
-extern Header rpmdbNextIterator(rpmdbMatchIterator mi);
+extern Header rpmmiNext(rpmmi mi);
 extern rpmts rpmtsCreate(void);
-extern rpmts rpmtsFree(rpmts ts);
-extern rpmdbMatchIterator rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
+extern void * rpmioFreePoolItem(rpmioItem item, const char * msg,
+	const char * fn, unsigned ln);
+extern rpmmi rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
 					    const void * keyp, size_t keylen);
     ]]), [
       LIBRPM_COMPAT=true
--- gdb-7.3.50.20110722/gdb/configure.rpm5~	2012-03-17 02:53:38.146198156 +0100
+++ gdb-7.3.50.20110722/gdb/configure	2012-03-17 02:53:38.328198427 +0100
@@ -7955,7 +7955,9 @@ else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#include <rpm/rpmlib.h>
+#include <rpm/rpmtypes.h>
+#include <stdio.h>
+#include <stdlib.h>
 #include <dlfcn.h>
 #include <errno.h>
 
@@ -8059,22 +8061,25 @@ fi
 $as_echo_n "checking rpm library API compatibility... " >&6; }
     # The compilation requires -Werror to verify anything.
     save_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS -Werror"
+    CFLAGS="$CFLAGS -I/usr/include/rpm $RPM_CFLAGS -Werror"
     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Duplicate here the declarations to verify they match "elfread.c".  */
-#include <rpm/rpmlib.h>
-#include <rpm/rpmts.h>
-#include <rpm/rpmdb.h>
-#include <rpm/header.h>
-extern char * headerFormat(Header h, const char * fmt, errmsg_t * errmsg);
+#include <stdint.h>
+#include <rpmio.h>
+#include <rpmtypes.h>
+#include <rpmrc.h>
+#include <rpmtag.h>
+#include <rpmts.h>
+#include <rpmdb.h>
+extern char * headerSprintf(Header h, const char * fmt, headerTagTableEntry tags, headerSprintfExtension exts, errmsg_t * errmsg);
 extern int rpmReadConfigFiles(const char * file, const char * target);
-extern rpmdbMatchIterator rpmdbFreeIterator(rpmdbMatchIterator mi);
-extern Header rpmdbNextIterator(rpmdbMatchIterator mi);
+extern Header rpmmiNext(rpmmi mi);
 extern rpmts rpmtsCreate(void);
-extern rpmts rpmtsFree(rpmts ts);
-extern rpmdbMatchIterator rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
+extern void * rpmioFreePoolItem(rpmioItem item, const char * msg,
+	const char * fn, unsigned ln);
+extern rpmmi rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
 					    const void * keyp, size_t keylen);
 
 int
@@ -8313,22 +8318,26 @@ fi
 $as_echo_n "checking rpm library API compatibility... " >&6; }
     # The compilation requires -Werror to verify anything.
     save_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS -Werror"
+    CFLAGS="$CFLAGS -I/usr/include/rpm $RPM_CFLAGS -Werror"
     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Duplicate here the declarations to verify they match "elfread.c".  */
-#include <rpm/rpmlib.h>
-#include <rpm/rpmts.h>
-#include <rpm/rpmdb.h>
-#include <rpm/header.h>
-extern char * headerFormat(Header h, const char * fmt, errmsg_t * errmsg);
+
+#include <stdint.h>
+#include <rpmio.h>
+#include <rpmtypes.h>
+#include <rpmrc.h>
+#include <rpmtag.h>
+#include <rpmts.h>
+#include <rpmdb.h>
+extern char * headerSprintf(Header h, const char * fmt, headerTagTableEntry tags, headerSprintfExtension exts, errmsg_t * errmsg);
 extern int rpmReadConfigFiles(const char * file, const char * target);
-extern rpmdbMatchIterator rpmdbFreeIterator(rpmdbMatchIterator mi);
-extern Header rpmdbNextIterator(rpmdbMatchIterator mi);
+extern Header rpmmiNext(rpmmi mi);
 extern rpmts rpmtsCreate(void);
-extern rpmts rpmtsFree(rpmts ts);
-extern rpmdbMatchIterator rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
+extern void * rpmioFreePoolItem(rpmioItem item, const char * msg,
+	const char * fn, unsigned ln);
+extern rpmmi rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
 					    const void * keyp, size_t keylen);
 
 int
--- gdb-7.3.50.20110722/gdb/Makefile.in.rpm5~	2012-03-17 02:53:38.184198212 +0100
+++ gdb-7.3.50.20110722/gdb/Makefile.in	2012-03-17 02:53:38.329198428 +0100
@@ -146,6 +146,10 @@ READLINE_SRC = $(srcdir)/$(READLINE_DIR)
 READLINE = @READLINE@
 READLINE_DEPS = @READLINE_DEPS@
 READLINE_CFLAGS = @READLINE_CFLAGS@
+# yeah, yeah, hardcode include path in addition, to workaround autofoo Â¤#"
+# this patch ain't likely to go upstream, so who the fuck cares anyways?
+# Anyone else even reading this at all?
+RPM_CFLAGS = -I/usr/include/rpm @RPM_CFLAGS@
 
 # Where is expat?  This will be empty if expat was not available.
 LIBEXPAT = @LIBEXPAT@
@@ -446,7 +450,7 @@ CXXFLAGS = -g -O
 # INTERNAL_CFLAGS is the aggregate of all other *CFLAGS macros.
 INTERNAL_CFLAGS_BASE = \
 	$(CXXFLAGS) $(GLOBAL_CFLAGS) $(PROFILE_CFLAGS) \
-	$(GDB_CFLAGS) $(OPCODES_CFLAGS) $(READLINE_CFLAGS) $(ZLIBINC) \
+	$(GDB_CFLAGS) $(OPCODES_CFLAGS) $(READLINE_CFLAGS) $(ZLIBINC) $(RPM_CFLAGS) \
 	$(BFD_CFLAGS) $(INCLUDE_CFLAGS) $(LIBDECNUMBER_CFLAGS) \
 	$(INTL_CFLAGS) $(INCGNU) $(ENABLE_CFLAGS) $(INTERNAL_CPPFLAGS)
 INTERNAL_WARN_CFLAGS = $(INTERNAL_CFLAGS_BASE) $(GDB_WARN_CFLAGS)
--- gdb-7.3.50.20110722/gdb/build-id.c.orig	2017-12-07 12:22:26.878101649 +0000
+++ gdb-7.3.50.20110722/gdb/build-id.c	2017-12-07 12:37:14.180128858 +0000
@@ -667,11 +667,13 @@
 }
 
 #ifdef HAVE_LIBRPM
-
-#include <rpm/rpmlib.h>
-#include <rpm/rpmts.h>
-#include <rpm/rpmdb.h>
-#include <rpm/header.h>
+#include <stdint.h>
+#include <rpmio.h>
+#include <rpmtypes.h>
+#include <rpmrc.h>
+#include <rpmtag.h>
+#include <rpmts.h>
+#include <rpmdb.h>
 #ifdef DLOPEN_LIBRPM
 #include <dlfcn.h>
 #endif
@@ -718,35 +720,40 @@
 {
   static int rpm_init_done = 0;
   rpmts ts;
-  rpmdbMatchIterator mi;
+  rpmmi mi;
   int count = 0;
 
 #ifdef DLOPEN_LIBRPM
   /* Duplicate here the declarations to verify they match.  The same sanity
      check is present also in `configure.ac'.  */
-  extern char * headerFormat(Header h, const char * fmt, errmsg_t * errmsg);
-  static char *(*headerFormat_p) (Header h, const char * fmt, errmsg_t *errmsg);
+  extern char * headerSprintf(Header h, const char * fmt, headerTagTableEntry tags, headerSprintfExtension exts, errmsg_t * errmsg);
+  static char *(*headerSprintf_p) (Header h, const char * fmt, headerTagTableEntry tags, headerSprintfExtension exts, errmsg_t *errmsg);
   extern int rpmReadConfigFiles(const char * file, const char * target);
   static int (*rpmReadConfigFiles_p) (const char * file, const char * target);
-  extern rpmdbMatchIterator rpmdbFreeIterator(rpmdbMatchIterator mi);
-  static rpmdbMatchIterator (*rpmdbFreeIterator_p) (rpmdbMatchIterator mi);
-  extern Header rpmdbNextIterator(rpmdbMatchIterator mi);
-  static Header (*rpmdbNextIterator_p) (rpmdbMatchIterator mi);
+  extern Header rpmmiNext(rpmmi mi);
+  static Header (*rpmmiNext_p) (rpmmi mi);
   extern rpmts rpmtsCreate(void);
   static rpmts (*rpmtsCreate_p) (void);
-  extern rpmts rpmtsFree(rpmts ts);
-  static rpmts (*rpmtsFree_p) (rpmts ts);
-  extern rpmdbMatchIterator rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
+  extern void * rpmioFreePoolItem(rpmioItem item, const char * msg,
+						    const char * fn, unsigned ln);
+  static void * (*rpmioFreePoolItem_p) (rpmioItem item, const char * msg,
+						    const char * fn, unsigned ln);
+#define rpmmiFree_p(_mi)  \
+    ((rpmmi)rpmioFreePoolItem_p((rpmioItem)(_mi), __FUNCTION__, __FILE__, __LINE__))
+#define	rpmtsFree_p(_ts)	\
+	((rpmts) rpmioFreePoolItem_p((rpmioItem)(_ts), __FUNCTION__, __FILE__, __LINE__))
+
+  extern rpmmi rpmtsInitIterator(const rpmts ts, rpmTag rpmtag,
                                               const void * keyp, size_t keylen);
-  static rpmdbMatchIterator (*rpmtsInitIterator_p) (const rpmts ts,
+  static rpmmi (*rpmtsInitIterator_p) (const rpmts ts,
 						    rpmTag rpmtag,
 						    const void *keyp,
 						    size_t keylen);
 #else	/* !DLOPEN_LIBRPM */
-# define headerFormat_p headerFormat
+# define headerSprintf_p headerSprintf
 # define rpmReadConfigFiles_p rpmReadConfigFiles
-# define rpmdbFreeIterator_p rpmdbFreeIterator
-# define rpmdbNextIterator_p rpmdbNextIterator
+# define rpmmiFree_p rpmmiFree
+# define rpmmiNext_p rpmmiNext
 # define rpmtsCreate_p rpmtsCreate
 # define rpmtsFree_p rpmtsFree
 # define rpmtsInitIterator_p rpmtsInitIterator
@@ -788,12 +795,11 @@
 	    return 0;
 	  }
 
-	if (!((headerFormat_p = (char *(*) (Header h, const char * fmt, errmsg_t *errmsg)) dlsym (h, "headerFormat"))
+	if (!((headerSprintf_p = (char *(*) (Header h, const char * fmt, headerTagTableEntry tags, headerSprintfExtension exts, errmsg_t *errmsg)) dlsym (h, "headerSprintf"))
 	      && (rpmReadConfigFiles_p = (int (*) (const char * file, const char * target)) dlsym (h, "rpmReadConfigFiles"))
-	      && (rpmdbFreeIterator_p = (rpmdbMatchIterator (*) (rpmdbMatchIterator mi)) dlsym (h, "rpmdbFreeIterator"))
-	      && (rpmdbNextIterator_p = (Header (*) (rpmdbMatchIterator mi)) dlsym (h, "rpmdbNextIterator"))
+	      && (rpmmiNext_p = (Header (*) (rpmmi mi)) dlsym (h, "rpmmiNext"))
 	      && (rpmtsCreate_p = (rpmts (*) (void)) dlsym (h, "rpmtsCreate"))
-	      && (rpmtsFree_p = (rpmts (*) (rpmts ts)) dlsym (h, "rpmtsFree"))
+	      && (rpmioFreePoolItem_p = (void (*) (rpmioItem item, const char * msg, const char * fn, unsigned ln)) dlsym (h, "rpmioFreePoolItem"))
 	      && (rpmtsInitIterator_p = (rpmdbMatchIterator (*) (const rpmts ts, rpmTag rpmtag, const void *keyp, size_t keylen)) dlsym (h, "rpmtsInitIterator"))))
 	  {
 	    warning (_("Opened library \"%s\" is incompatible (%s), "
@@ -832,15 +838,15 @@
 	  errmsg_t err;
 	  size_t srcrpmlen = sizeof (".src.rpm") - 1;
 	  size_t debuginfolen = sizeof ("-debuginfo") - 1;
-	  rpmdbMatchIterator mi_debuginfo;
+	  rpmmi mi_debuginfo;
 
-	  h = rpmdbNextIterator_p (mi);
+	  h = rpmmiNext_p (mi);
 	  if (h == NULL)
 	    break;
 
 	  /* Verify the debuginfo file is not already installed.  */
 
-	  debuginfo = headerFormat_p (h, "%{sourcerpm}-debuginfo.%{arch}",
+	  debuginfo = headerSprintf_p (h, "%{sourcerpm}-debug.%{arch}", NULL, NULL,
 				      &err);
 	  if (!debuginfo)
 	    {
@@ -882,18 +888,18 @@
 
 	  /* RPMDBI_PACKAGES requires keylen == sizeof (int).  */
 	  /* RPMDBI_LABEL is an interface for NVR-based dbiFindByLabel().  */
-	  mi_debuginfo = rpmtsInitIterator_p (ts, (rpmTag) RPMDBI_LABEL, debuginfo, 0);
+	  mi_debuginfo = rpmtsInitIterator_p (ts, (rpmTag) RPMTAG_NVRA, debuginfo, 0);
 	  xfree (debuginfo);
 	  if (mi_debuginfo)
 	    {
-	      rpmdbFreeIterator_p (mi_debuginfo);
+	      rpmmiFree_p (mi_debuginfo); 
 	      count = 0;
 	      break;
 	    }
 
 	  /* The allocated memory gets utilized below for MISSING_RPM_HASH.  */
-	  debuginfo = headerFormat_p (h,
-				      "%{name}-%{version}-%{release}.%{arch}",
+	  debuginfo = headerSprintf_p (h,
+				      "%{name}-%{version}-%{release}.%{arch}", NULL, NULL,
 				      &err);
 	  if (!debuginfo)
 	    {
@@ -975,10 +981,10 @@
 	}
 #endif
 
-      rpmdbFreeIterator_p (mi);
+      mi = rpmmiFree_p (mi);
     }
 
-  rpmtsFree_p (ts);
+  ts = rpmtsFree_p (ts);
 
   return count;
 }
